{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115package com.hypers.task;import com.alibaba.fastjson.JSON;import com.hypers.S3.S3Config;import com.hypers.S3.aws.AwsS3Upload;import com.hypers.entity.Account;import com.hypers.entity.Campaign;import com.hypers.entity.ManualMessage;import com.hypers.service.CampaignService;import com.hypers.util.common.FileUtil;import com.hypers.util.hfa.ZipUtils;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;/** * 活动定时上传s3， */@Componentpublic class CampaignTask { @Autowired AwsS3Upload upload; @Autowired S3Config s3Config; @Autowired private CampaignService campaignService; private static final String name = \"FREQUENCY\"; private static final String SUB_JSON = \".json\"; private static final String SUB_ZIP = \".zip\"; private static final String TEMP = \"/temp/\"; /** * 每天凌晨执行，统计已过去一天需计算的内容 */ @Scheduled(cron = \"10 0 0 * * ? \") public void execute() { /** * 统计上传所需计算的当天截止时间的所有活动（出现过的活动,无视停启用状态） * TA 筛选的问题需要加 */ try { Calendar calendar = Calendar.getInstance(); // calendar.set(2019, 11, 26); Date date = calendar.getTime();//DateUtils.addDays(, );//DateUtils.addMonths( -1); uploadFrequencyFile(date, null, null); } catch (Exception e) { e.printStackTrace(); } } /** * 频次计算清单文件上传 */ private void uploadFrequencyFile(Date date, List&lt;Long&gt; accountIds, List&lt;Long&gt; orderIds) throws Exception { String localPath = s3Config.getTempPath() + TEMP; List&lt;Campaign&gt; campaignByDate = campaignService .calCampaign(campaignService.getCampaignByDate(date, accountIds, orderIds)); String content = JSON.toJSONString(campaignByDate); FileUtil.writeFile(localPath, name + SUB_JSON, content); File file = new File(localPath + name + SUB_JSON); ZipUtils.zipFile(file, \"\"); file = new File(localPath + name + SUB_ZIP);// upload.uploadFile(s3Config.getBucket(), s3Config.getFrequencyPath(), file); upload.uploadFileWithPublicReadAccess(s3Config.getBucket(), s3Config.getFrequencyPath(), file.getName(), new FileInputStream(file), 0); FileUtil.delete(localPath, name); } /** * 人工操作：指定日期范围 */ public void execute(ManualMessage message) throws Exception { switch (message.getType()) { case \"operate\": // 运营报告 //计算运营计算清单，发送计算端，目前不支持 break; case \"frequency\": // 频次报告重算（测试操作） //计算重算清单，发送计算端 /** * 1.仅指定天重算对应天数据，范围型不支持 (不支持) * 2.指定活动，重算该活动及其下所有订单 （没有时间范围默认全范围，可指定范围） * 3.指定订单，只算对应活动的指定订单（没有时间范围默认全范围，可指定范围） */ List&lt;Long&gt; accountIds = new ArrayList&lt;&gt;(); List&lt;Long&gt; lineOrderIds = new ArrayList&lt;&gt;(); List&lt;Account&gt; account = message.getAccount(); account.forEach(a -&gt; { if (a.getLineOrders() != null &amp;&amp; a.getLineOrders().size() &gt; 0) { lineOrderIds.addAll(a.getLineOrders()); } else { accountIds.add(a.getId()); } }); Calendar calendar = Calendar.getInstance(); // calendar.set(2019, 11, 26); Date date = calendar.getTime();//DateUtils.addDays(, -1);//DateUtils.addMonths( -1); uploadFrequencyFile(date, accountIds, lineOrderIds); break; default: // 发送报警邮件 break; } }}","link":"/blog/2019/12/28/hello-world/"},{"title":"编写卓越的代码——防御性编程","text":"编写卓越的代码软件工程师的智慧，就在于他们是否开始意识到：使程序能用和使程序正确，这两者之间有什么样的差别。 M.A.Jackson《程序设计原理》 可用的代码：提供常规输入集，代码给出常规输出；一旦有意外输入，代码崩溃。 正确的代码：对于所有输入集，有正确的输出； 优秀的代码：一定是正确的代码；逻辑容易理解；代码自然；容易维护。 防御性编程防御性编程是一种细致、谨慎的编程方法。为了开发可靠的软件，我们要设计系统中的每个组件，以使其尽可能地“保护”自己。我们通过明确地在代码中对设想进行检查，击碎了未记录下来的设想。这是一种努力，防止（或至少是观察）我们的代码以将会展现错误行为的方式被调用。 Java 中的实践Integer.parseInt()Integer1234567891011121314public static int parseInt(String s, int radix) throws NumberFormatException{ if (s == null) { throw new NumberFormatException(\"null\"); } if (radix &lt; Character.MIN_RADIX) { throw new NumberFormatException(\"radix \" + radix + \" less than Character.MIN_RADIX\"); } if (radix &gt; Character.MAX_RADIX) { throw new NumberFormatException(\"radix \" + radix + \" greater than Character.MAX_RADIX\"); } // 主逻辑}","link":"/blog/2020/03/07/%E7%BC%96%E5%86%99%E5%8D%93%E8%B6%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"Coding","slug":"Coding","link":"/blog/tags/Coding/"},{"name":"Defensive Programming","slug":"Defensive-Programming","link":"/blog/tags/Defensive-Programming/"}],"categories":[{"name":"Coding","slug":"Coding","link":"/blog/categories/Coding/"},{"name":"Defensive Programming","slug":"Coding/Defensive-Programming","link":"/blog/categories/Coding/Defensive-Programming/"}]}