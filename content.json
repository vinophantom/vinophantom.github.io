{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115package com.hypers.task;import com.alibaba.fastjson.JSON;import com.hypers.S3.S3Config;import com.hypers.S3.aws.AwsS3Upload;import com.hypers.entity.Account;import com.hypers.entity.Campaign;import com.hypers.entity.ManualMessage;import com.hypers.service.CampaignService;import com.hypers.util.common.FileUtil;import com.hypers.util.hfa.ZipUtils;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;/** * 活动定时上传s3， */@Componentpublic class CampaignTask { @Autowired AwsS3Upload upload; @Autowired S3Config s3Config; @Autowired private CampaignService campaignService; private static final String name = \"FREQUENCY\"; private static final String SUB_JSON = \".json\"; private static final String SUB_ZIP = \".zip\"; private static final String TEMP = \"/temp/\"; /** * 每天凌晨执行，统计已过去一天需计算的内容 */ @Scheduled(cron = \"10 0 0 * * ? \") public void execute() { /** * 统计上传所需计算的当天截止时间的所有活动（出现过的活动,无视停启用状态） * TA 筛选的问题需要加 */ try { Calendar calendar = Calendar.getInstance(); // calendar.set(2019, 11, 26); Date date = calendar.getTime();//DateUtils.addDays(, );//DateUtils.addMonths( -1); uploadFrequencyFile(date, null, null); } catch (Exception e) { e.printStackTrace(); } } /** * 频次计算清单文件上传 */ private void uploadFrequencyFile(Date date, List&lt;Long&gt; accountIds, List&lt;Long&gt; orderIds) throws Exception { String localPath = s3Config.getTempPath() + TEMP; List&lt;Campaign&gt; campaignByDate = campaignService .calCampaign(campaignService.getCampaignByDate(date, accountIds, orderIds)); String content = JSON.toJSONString(campaignByDate); FileUtil.writeFile(localPath, name + SUB_JSON, content); File file = new File(localPath + name + SUB_JSON); ZipUtils.zipFile(file, \"\"); file = new File(localPath + name + SUB_ZIP);// upload.uploadFile(s3Config.getBucket(), s3Config.getFrequencyPath(), file); upload.uploadFileWithPublicReadAccess(s3Config.getBucket(), s3Config.getFrequencyPath(), file.getName(), new FileInputStream(file), 0); FileUtil.delete(localPath, name); } /** * 人工操作：指定日期范围 */ public void execute(ManualMessage message) throws Exception { switch (message.getType()) { case \"operate\": // 运营报告 //计算运营计算清单，发送计算端，目前不支持 break; case \"frequency\": // 频次报告重算（测试操作） //计算重算清单，发送计算端 /** * 1.仅指定天重算对应天数据，范围型不支持 (不支持) * 2.指定活动，重算该活动及其下所有订单 （没有时间范围默认全范围，可指定范围） * 3.指定订单，只算对应活动的指定订单（没有时间范围默认全范围，可指定范围） */ List&lt;Long&gt; accountIds = new ArrayList&lt;&gt;(); List&lt;Long&gt; lineOrderIds = new ArrayList&lt;&gt;(); List&lt;Account&gt; account = message.getAccount(); account.forEach(a -&gt; { if (a.getLineOrders() != null &amp;&amp; a.getLineOrders().size() &gt; 0) { lineOrderIds.addAll(a.getLineOrders()); } else { accountIds.add(a.getId()); } }); Calendar calendar = Calendar.getInstance(); // calendar.set(2019, 11, 26); Date date = calendar.getTime();//DateUtils.addDays(, -1);//DateUtils.addMonths( -1); uploadFrequencyFile(date, accountIds, lineOrderIds); break; default: // 发送报警邮件 break; } }}","link":"/2019/12/28/hello-world/"},{"title":"编写卓越的代码——防御性编程","text":"编写卓越的代码软件工程师的智慧，就在于他们是否开始意识到：使程序能用和使程序正确，这两者之间有什么样的差别。 M.A.Jackson《程序设计原理》 可用的代码：提供常规输入集，代码给出常规输出；一旦有意外输入，代码崩溃。 正确的代码：对于所有输入集，有正确的输出； 优秀的代码：一定是正确的代码；逻辑容易理解；代码自然；容易维护。 防御性编程防御性编程是一种细致、谨慎的编程方法。为了开发可靠的软件，我们要设计系统中的每个组件，以使其尽可能地“保护”自己。我们通过明确地在代码中对设想进行检查，击碎了未记录下来的设想。这是一种努力，防止（或至少是观察）我们的代码以将会展现错误行为的方式被调用。 Java 中的实践Integer.parseInt()Integer1234567891011121314public static int parseInt(String s, int radix) throws NumberFormatException{ if (s == null) { throw new NumberFormatException(\"null\"); } if (radix &lt; Character.MIN_RADIX) { throw new NumberFormatException(\"radix \" + radix + \" less than Character.MIN_RADIX\"); } if (radix &gt; Character.MAX_RADIX) { throw new NumberFormatException(\"radix \" + radix + \" greater than Character.MAX_RADIX\"); } // 主逻辑}","link":"/2020/03/07/%E7%BC%96%E5%86%99%E5%8D%93%E8%B6%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/"},{"title":"ParallelStream 的正确打开方式","text":"ParallelStream 是什么ParallelStream 其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度. ParallelStream 的作用ParallelStream 具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作。 forEach()1234List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);numbers.parallelStream() .forEach(out::println); 上面的代码我们的到的不是顺序的1、2、3、4、5…，而是随机的顺序。 如果需要按照原来的顺序便利，可以使用forEachOrdered()方法： forEachOrdered()1234List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);numbers.parallelStream() .forEachOrdered(out::println); ParallelStream 的实现ParallelStream 是由 ForkJoin 与 ForkJoinPool 实现的。ForkJoinPool 使用相对少的线程来处理大量的任务。比如有一个任务需要处理100万的数据，那么这个任务会被分割成两个处理50万数据的任务，以此类推，直到任务单元被分割成一个预设的阈值大小的任务，直到这些子任务被执行完，这个任务才将完成。这和ThreadPoolExecutor的区别是，ThreadPoolExecutor 处理这个100万的任务会需要100万的线程。 ForkJoinPool 默认的大小等于当前机器的 CPU 核心数。可以使用 -Djava.util.concurrent.ForkJoinPool.common.parallelism=N 来设置 ForkJoinPool 的大小。 程序中的 ParallelStream 共用一个 commonForkJoinPool。 ParallelStream 的坑ParallelStream固然有它强大的地方，但同样的，它也存在着陷阱。 123456 public Object query(List&lt;Request&gt; reqs) { Optional&lt;String&gt; result = reqs.stream().parallel().map( -&gt; { return client.url(url).get(); }).findAny(); return result.get();} 上面的代码用来获取第一个返回的请求，注意网络请求属于IO操作，这里面存在在被阻塞的风险，故而这段代码的设计是存在问题。前面提到程序中的 ParallelStream 共用一个 commonForkJoinPool，试想如果这里调用的 API 响应比较慢，那么这段代码就会影响到其他使用 ParallelStream 的地方（阻塞其他任务）。这样的后果往往是不可估量的。 如何正确使用 ParallelStream 首先，我们需要考虑需不需要用ParallelStream。 1.是否需要并行？ 2.任务之间是否是独立的？是否会引起任何竞态条件？ 3.结果是否取决于任务的调用顺序？ 考虑过这三个问题后再决定是否使用ParallelStream。 其次，使用指定的不与其他任务冲突的 ForkJoinPool。 12345678ForkJoinPool forkJoinPool = new ForkJoinPool(3); forkJoinPool.submit(() -&gt; { firstRange.parallelStream().forEach((number) -&gt; { try { Thread.sleep(5); } catch (InterruptedException e) { } });});","link":"/2020/03/08/ParallelStream-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"},{"title":"随便说说设计原则","text":"设计原则SRP - 单一职责原则一个类，最好只负责一件事，只有一个引起它变化的原因。 接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。 ISP - 接口隔离原则 客户端不应该依赖它不需要的接口。 类间的依赖关系应该建立在最小的接口上。 Clients should not be forced to depend upon interfaces that they don’t use. The dependency of one class to another one should depend on the smallest possible interface. DIP - 依赖倒置原则 高层模块不应该依赖低层模块，二者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象 依赖倒置的中心思想是面向接口编程 相对于细节的多变性，抽象的东西要稳定得多。 LSP - 里氏替换原则If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T. 所有引用基类的地方必须能透明地使用其子类对象。（尽量不要重写基类的方法） Law of Demete - 迪米特法则Only talk to your immediate friends OCP - 开闭原则以上所有原则的最终目标，是遵守开闭原则","link":"/2019/03/14/%E9%9A%8F%E4%BE%BF%E8%AF%B4%E8%AF%B4%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"},{"title":"lsof——一周一个 Linux 命令","text":"lsof （List Open Files）是一个查看当前系统文件的命令。 一切皆文件 想必用过 Linux 的工程师一定听说过这句话。在Linux中，所有硬件、软件、网络连接都被抽象成文件。 lsof 列出的文件可以是： 普通文件 目录 网络文件系统的文件 字符或设备文件 (函数)共享库 管道，命名管道 符号链接 网络文件（例如：NFS file、网络socket，unix域名socket） 其它 命令参数-a 列出打开文件存在的进程-c&lt;进程名&gt; 列出指定进程所打开的文件-g 列出GID号进程详情-d&lt;文件号&gt; 列出占用该文件号的进程+d&lt;目录&gt; 列出目录下被打开的文件+D&lt;目录&gt; 递归列出目录下被打开的文件-n&lt;目录&gt; 列出使用NFS的文件-i&lt;条件&gt; 列出符合条件的进程。（4/6/协议/:端口/@ip ）-p&lt;进程号&gt; 列出指定进程号所打开的文件-u 列出UID号进程详情-h 显示帮助信息-v 显示版本信息 例子显示所有被打开的文件12345678910$ lsof COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEsecd 437 vinophantom 3u unix 0xc4266fa755a6d1bb 0t0 -&gt;0xc4266fa74edbd413Dock 460 vinophantom 29u unix 0xc4266fa75c64df63 0t0 -&gt;0xc4266fa74edbd413SystemUIS 461 vinophantom 6u unix 0xc4266fa74edbc603 0t0 -&gt;0xc4266fa74edbd413Finder 462 vinophantom 10u unix 0xc4266fa755a6bbdb 0t0 -&gt;0xc4266fa74edbd413rapportd 471 vinophantom 7u unix 0xc4266fa755a6bca3 0t0 -&gt;0xc4266fa755a6e92b... 列出网络连接列出使用指定端口的进程12345$ lsof -i :80 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEWeChat 49333 vinophantom 26u IPv6 0xc4266fa78597339b 0t0 TCP 10.0.5.62:62900-&gt;183.3.224.139:http (ESTABLISHED)wpsoffice 49481 vinophantom 57u IPv4 0xc4266fa7844f17cb 0t0 TCP 10.0.5.62:55700-&gt;101.89.125.229:http (CLOSE_WAIT)idea 54747 vinophantom 1072u IPv6 0xc4266fa78201a13b 0t0 TCP 10.0.5.62:51772-&gt;185.199.109.153:http (ESTABLISHED) 1$lsof -i :80,443 列出所有 tcp 连接123456789$ lsof -i tcp COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMErapportd 471 vinophantom 4u IPv4 0xc4266fa7699c666b 0t0 TCP *:62623 (LISTEN)rapportd 471 vinophantom 5u IPv6 0xc4266fa77b9865fb 0t0 TCP *:62623 (LISTEN)uTools 545 vinophantom 76u IPv4 0xc4266fa763d1e7cb 0t0 TCP 192.168.1.105:50011-&gt;47.107.171.113:https (ESTABLISHED)uTools 545 vinophantom 109u IPv4 0xc4266fa760c75deb 0t0 TCP 192.168.1.105:50249-&gt;47.107.171.113:https (ESTABLISHED)... 列出 udp1$lsof -i udp 列出 ipv4、ipv6 的网络连接1$lsof -i 4 1$lsof -i 6 列出某地址的网络连接1$lsof -i @192.168.0.1 列出某个进程打开的文件根据进程号1$lsof -p 11981 根据进程名1$lsof -c mysql 1$lsof -c redis -c mysql","link":"/2020/04/23/lsof%E2%80%94%E2%80%94%E4%B8%80%E5%91%A8%E4%B8%80%E4%B8%AA-Linux-%E5%91%BD%E4%BB%A4/"}],"tags":[{"name":"Coding","slug":"Coding","link":"/tags/Coding/"},{"name":"Defensive Programming","slug":"Defensive-Programming","link":"/tags/Defensive-Programming/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Stream","slug":"Stream","link":"/tags/Stream/"},{"name":"DesignPrinciples","slug":"DesignPrinciples","link":"/tags/DesignPrinciples/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"}],"categories":[{"name":"Coding","slug":"Coding","link":"/categories/Coding/"},{"name":"Defensive Programming","slug":"Coding/Defensive-Programming","link":"/categories/Coding/Defensive-Programming/"},{"name":"Java","slug":"Coding/Java","link":"/categories/Coding/Java/"}]}