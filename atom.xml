<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quantum</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vinophantom.github.io/"/>
  <updated>2020-04-23T10:11:51.147Z</updated>
  <id>https://vinophantom.github.io/</id>
  
  <author>
    <name>许伟杰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lsof——一周一个 Linux 命令</title>
    <link href="https://vinophantom.github.io/2020/04/23/lsof%E2%80%94%E2%80%94%E4%B8%80%E5%91%A8%E4%B8%80%E4%B8%AA-Linux-%E5%91%BD%E4%BB%A4/"/>
    <id>https://vinophantom.github.io/2020/04/23/lsof%E2%80%94%E2%80%94%E4%B8%80%E5%91%A8%E4%B8%80%E4%B8%AA-Linux-%E5%91%BD%E4%BB%A4/</id>
    <published>2020-04-23T09:23:20.000Z</published>
    <updated>2020-04-23T10:11:51.147Z</updated>
    
    <content type="html"><![CDATA[<p><code>lsof</code> （List Open Files）是一个查看当前系统文件的命令。</p><blockquote><p>一切皆文件</p></blockquote><p>想必用过 Linux 的工程师一定听说过这句话。在Linux中，所有硬件、软件、网络连接都被抽象成文件。</p><a id="more"></a><p><code>lsof</code> 列出的文件可以是：</p><ul><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符或设备文件</li><li>(函数)共享库</li><li>管道，命名管道</li><li>符号链接</li><li>网络文件（例如：NFS file、网络socket，unix域名socket）</li><li>其它</li></ul><h1 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h1><blockquote><p><code>-a</code> 列出打开文件存在的进程<br><code>-c&lt;进程名&gt;</code> 列出指定进程所打开的文件<br><code>-g</code> 列出GID号进程详情<br><code>-d&lt;文件号&gt;</code> 列出占用该文件号的进程<br><code>+d&lt;目录&gt;</code> 列出目录下被打开的文件<br><code>+D&lt;目录&gt;</code> 递归列出目录下被打开的文件<br><code>-n&lt;目录&gt;</code> 列出使用NFS的文件<br><code>-i&lt;条件&gt;</code> 列出符合条件的进程。（4/6/协议/:端口/@ip ）<br><code>-p&lt;进程号&gt;</code> 列出指定进程号所打开的文件<br><code>-u</code> 列出UID号进程详情<br><code>-h</code> 显示帮助信息<br><code>-v</code> 显示版本信息</p></blockquote><!-- 引用 --><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="显示所有被打开的文件"><a href="#显示所有被打开的文件" class="headerlink" title="显示所有被打开的文件"></a>显示所有被打开的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> lsof     </span><br>COMMAND     PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME<br>secd        437 vinophantom    3u  unix 0xc4266fa755a6d1bb      0t0      -&gt;0xc4266fa74edbd413<br>Dock        460 vinophantom   29u  unix 0xc4266fa75c64df63      0t0      -&gt;0xc4266fa74edbd413<br>SystemUIS   461 vinophantom    6u  unix 0xc4266fa74edbc603      0t0      -&gt;0xc4266fa74edbd413<br>Finder      462 vinophantom   10u  unix 0xc4266fa755a6bbdb      0t0      -&gt;0xc4266fa74edbd413<br>rapportd    471 vinophantom    7u  unix 0xc4266fa755a6bca3      0t0      -&gt;0xc4266fa755a6e92b<br>.<br>.<br>.<br></code></pre></td></tr></table></figure><h2 id="列出网络连接"><a href="#列出网络连接" class="headerlink" title="列出网络连接"></a>列出网络连接</h2><h3 id="列出使用指定端口的进程"><a href="#列出使用指定端口的进程" class="headerlink" title="列出使用指定端口的进程"></a>列出使用指定端口的进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> lsof -i :80  </span><br>COMMAND     PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME<br>WeChat    49333 vinophantom   26u  IPv6 0xc4266fa78597339b      0t0  TCP 10.0.5.62:62900-&gt;183.3.224.139:http (ESTABLISHED)<br>wpsoffice 49481 vinophantom   57u  IPv4 0xc4266fa7844f17cb      0t0  TCP 10.0.5.62:55700-&gt;101.89.125.229:http (CLOSE_WAIT)<br>idea      54747 vinophantom 1072u  IPv6 0xc4266fa78201a13b      0t0  TCP 10.0.5.62:51772-&gt;185.199.109.153:http (ESTABLISHED)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -i :80,443</span><br></code></pre></td></tr></table></figure><h3 id="列出所有-tcp-连接"><a href="#列出所有-tcp-连接" class="headerlink" title="列出所有 tcp 连接"></a>列出所有 tcp 连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> lsof -i tcp  </span><br>COMMAND     PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME<br>rapportd    471 vinophantom    4u  IPv4 0xc4266fa7699c666b      0t0  TCP *:62623 (LISTEN)<br>rapportd    471 vinophantom    5u  IPv6 0xc4266fa77b9865fb      0t0  TCP *:62623 (LISTEN)<br>uTools      545 vinophantom   76u  IPv4 0xc4266fa763d1e7cb      0t0  TCP 192.168.1.105:50011-&gt;47.107.171.113:https (ESTABLISHED)<br>uTools      545 vinophantom  109u  IPv4 0xc4266fa760c75deb      0t0  TCP 192.168.1.105:50249-&gt;47.107.171.113:https (ESTABLISHED)<br>.<br>.<br>.<br></code></pre></td></tr></table></figure><h3 id="列出-udp"><a href="#列出-udp" class="headerlink" title="列出 udp"></a>列出 udp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -i udp</span><br></code></pre></td></tr></table></figure><h3 id="列出-ipv4、ipv6-的网络连接"><a href="#列出-ipv4、ipv6-的网络连接" class="headerlink" title="列出 ipv4、ipv6 的网络连接"></a>列出 ipv4、ipv6 的网络连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -i 4</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -i 6</span><br></code></pre></td></tr></table></figure><h3 id="列出某地址的网络连接"><a href="#列出某地址的网络连接" class="headerlink" title="列出某地址的网络连接"></a>列出某地址的网络连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -i @192.168.0.1</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="列出某个进程打开的文件"><a href="#列出某个进程打开的文件" class="headerlink" title="列出某个进程打开的文件"></a>列出某个进程打开的文件</h2><h3 id="根据进程号"><a href="#根据进程号" class="headerlink" title="根据进程号"></a>根据进程号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -p 11981</span><br></code></pre></td></tr></table></figure><h3 id="根据进程名"><a href="#根据进程名" class="headerlink" title="根据进程名"></a>根据进程名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -c mysql</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">lsof -c redis -c mysql</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;lsof&lt;/code&gt; （List Open Files）是一个查看当前系统文件的命令。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;一切皆文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想必用过 Linux 的工程师一定听说过这句话。在Linux中，所有硬件、软件、网络连接都被抽象成文件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://vinophantom.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://vinophantom.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>ParallelStream 的正确打开方式</title>
    <link href="https://vinophantom.github.io/2020/03/08/ParallelStream-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>https://vinophantom.github.io/2020/03/08/ParallelStream-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</id>
    <published>2020-03-08T14:17:06.000Z</published>
    <updated>2020-03-08T16:21:21.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ParallelStream-是什么"><a href="#ParallelStream-是什么" class="headerlink" title="ParallelStream 是什么"></a>ParallelStream 是什么</h1><p><strong>ParallelStream</strong> 其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度.</p><h1 id="ParallelStream-的作用"><a href="#ParallelStream-的作用" class="headerlink" title="ParallelStream 的作用"></a>ParallelStream 的作用</h1><p><strong>ParallelStream</strong> 具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作。</p><a id="more"></a><figure class="highlight java"><figcaption><span>forEach()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br><br>numbers.parallelStream()<br>       .forEach(out::println); <br></code></pre></td></tr></table></figure> <p>上面的代码我们的到的不是顺序的1、2、3、4、5…，而是随机的顺序。</p><p>如果需要按照原来的顺序便利，可以使用forEachOrdered()方法：</p><figure class="highlight java"><figcaption><span>forEachOrdered()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br><br>numbers.parallelStream()<br>       .forEachOrdered(out::println);<br></code></pre></td></tr></table></figure><h1 id="ParallelStream-的实现"><a href="#ParallelStream-的实现" class="headerlink" title="ParallelStream 的实现"></a>ParallelStream 的实现</h1><p>ParallelStream 是由 ForkJoin 与 ForkJoinPool 实现的。<br>ForkJoinPool 使用相对少的线程来处理大量的任务。<br>比如有一个任务需要处理100万的数据，那么这个任务会被分割成两个处理50万数据的任务，以此类推，直到任务单元被分割成一个预设的阈值大小的任务，直到这些子任务被执行完，这个任务才将完成。<br>这和ThreadPoolExecutor的区别是，ThreadPoolExecutor 处理这个100万的任务会需要100万的线程。</p><blockquote><p>ForkJoinPool 默认的大小等于当前机器的 CPU 核心数。<br>可以使用 <code>-Djava.util.concurrent.ForkJoinPool.common.parallelism=N</code> 来设置 ForkJoinPool 的大小。</p><p><strong>程序中的 ParallelStream 共用一个 commonForkJoinPool</strong>。</p></blockquote><h1 id="ParallelStream-的坑"><a href="#ParallelStream-的坑" class="headerlink" title="ParallelStream 的坑"></a>ParallelStream 的坑</h1><p><strong>ParallelStream</strong>固然有它强大的地方，但同样的，它也存在着陷阱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">query</span><span class="hljs-params">(List&lt;Request&gt; reqs)</span> </span>&#123;<br>     Optional&lt;String&gt; result = reqs.stream().parallel().map( -&gt; &#123;<br>      <span class="hljs-keyword">return</span> client.url(url).get();<br>      &#125;).findAny();<br>      <span class="hljs-keyword">return</span> result.get();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码用来获取第一个返回的请求，注意网络请求属于IO操作，这里面存在在被阻塞的风险，故而这段代码的设计是存在问题。<br>前面提到程序中的 <code>ParallelStream</code> 共用一个 commonForkJoinPool，试想如果这里调用的 API 响应比较慢，那么这段代码就会影响到其他使用 <code>ParallelStream</code> 的地方（<strong>阻塞</strong>其他任务）。这样的后果往往是不可估量的。</p><h1 id="如何正确使用-ParallelStream"><a href="#如何正确使用-ParallelStream" class="headerlink" title="如何正确使用 ParallelStream"></a>如何正确使用 ParallelStream</h1><ul><li>首先，我们需要考虑需不需要用<code>ParallelStream</code>。<br>  1.是否需要并行？<br>  2.任务之间是否是独立的？是否会引起任何竞态条件？<br>  3.结果是否取决于任务的调用顺序？<br>  考虑过这三个问题后再决定是否使用<code>ParallelStream</code>。</li></ul><ul><li>其次，使用指定的不与其他任务冲突的 <code>ForkJoinPool</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ForkJoinPool forkJoinPool = <span class="hljs-keyword">new</span> ForkJoinPool(<span class="hljs-number">3</span>);  <br>forkJoinPool.submit(() -&gt; &#123;  <br>    firstRange.parallelStream().forEach((number) -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ParallelStream-是什么&quot;&gt;&lt;a href=&quot;#ParallelStream-是什么&quot; class=&quot;headerlink&quot; title=&quot;ParallelStream 是什么&quot;&gt;&lt;/a&gt;ParallelStream 是什么&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ParallelStream&lt;/strong&gt; 其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度.&lt;/p&gt;
&lt;h1 id=&quot;ParallelStream-的作用&quot;&gt;&lt;a href=&quot;#ParallelStream-的作用&quot; class=&quot;headerlink&quot; title=&quot;ParallelStream 的作用&quot;&gt;&lt;/a&gt;ParallelStream 的作用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ParallelStream&lt;/strong&gt; 具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://vinophantom.github.io/categories/Coding/"/>
    
      <category term="Java" scheme="https://vinophantom.github.io/categories/Coding/Java/"/>
    
    
      <category term="Java" scheme="https://vinophantom.github.io/tags/Java/"/>
    
      <category term="Stream" scheme="https://vinophantom.github.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>编写卓越的代码——防御性编程</title>
    <link href="https://vinophantom.github.io/2020/03/07/%E7%BC%96%E5%86%99%E5%8D%93%E8%B6%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/"/>
    <id>https://vinophantom.github.io/2020/03/07/%E7%BC%96%E5%86%99%E5%8D%93%E8%B6%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/</id>
    <published>2020-03-06T16:24:37.000Z</published>
    <updated>2020-03-06T18:03:53.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写卓越的代码"><a href="#编写卓越的代码" class="headerlink" title="编写卓越的代码"></a>编写卓越的代码</h1><blockquote><p>软件<strong>工程师</strong>的智慧，就在于他们是否开始意识到：使程序能用和使程序正确，这两者之间有什么样的差别。</p><footer><strong>M.A.Jackson</strong><cite>《程序设计原理》</cite></footer></blockquote><ul><li><strong>可用的代码</strong>：提供常规输入集，代码给出常规输出；一旦有意外输入，代码崩溃。</li><li><strong>正确的代码</strong>：对于所有输入集，有正确的输出；</li><li><strong>优秀的代码</strong>：一定是正确的代码；逻辑容易理解；代码自然；容易维护。</li></ul><a id="more"></a><h1 id="防御性编程"><a href="#防御性编程" class="headerlink" title="防御性编程"></a>防御性编程</h1><p>防御性编程是一种细致、谨慎的编程方法。为了开发可靠的软件，我们要设计系统中的每个组件，以使其尽可能地“保护”自己。我们通过明确地在代码中对设想进行检查，击碎了未记录下来的设想。这是一种努力，防止（或至少是观察）我们的代码以将会展现错误行为的方式被调用。</p><h1 id="Java-中的实践"><a href="#Java-中的实践" class="headerlink" title="Java 中的实践"></a>Java 中的实践</h1><figure class="highlight java"><figcaption><span>Integer.parseInt()</span><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html">Integer</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span> <span class="keyword">throws</span> NumberFormatException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</span><br><span class="line">                                            <span class="string">" less than Character.MIN_RADIX"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (radix &gt; Character.MAX_RADIX) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</span><br><span class="line">                                            <span class="string">" greater than Character.MAX_RADIX"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 主逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编写卓越的代码&quot;&gt;&lt;a href=&quot;#编写卓越的代码&quot; class=&quot;headerlink&quot; title=&quot;编写卓越的代码&quot;&gt;&lt;/a&gt;编写卓越的代码&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;软件&lt;strong&gt;工程师&lt;/strong&gt;的智慧，就在于他们是否开始意识到：使程序能用和使程序正确，这两者之间有什么样的差别。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;M.A.Jackson&lt;/strong&gt;&lt;cite&gt;《程序设计原理》&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可用的代码&lt;/strong&gt;：提供常规输入集，代码给出常规输出；一旦有意外输入，代码崩溃。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正确的代码&lt;/strong&gt;：对于所有输入集，有正确的输出；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优秀的代码&lt;/strong&gt;：一定是正确的代码；逻辑容易理解；代码自然；容易维护。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://vinophantom.github.io/categories/Coding/"/>
    
      <category term="Defensive Programming" scheme="https://vinophantom.github.io/categories/Coding/Defensive-Programming/"/>
    
    
      <category term="Coding" scheme="https://vinophantom.github.io/tags/Coding/"/>
    
      <category term="Defensive Programming" scheme="https://vinophantom.github.io/tags/Defensive-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://vinophantom.github.io/2019/12/28/hello-world/"/>
    <id>https://vinophantom.github.io/2019/12/28/hello-world/</id>
    <published>2019-12-28T02:34:08.480Z</published>
    <updated>2020-01-08T08:44:31.196Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hypers.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.hypers.S3.S3Config;</span><br><span class="line"><span class="keyword">import</span> com.hypers.S3.aws.AwsS3Upload;</span><br><span class="line"><span class="keyword">import</span> com.hypers.entity.Account;</span><br><span class="line"><span class="keyword">import</span> com.hypers.entity.Campaign;</span><br><span class="line"><span class="keyword">import</span> com.hypers.entity.ManualMessage;</span><br><span class="line"><span class="keyword">import</span> com.hypers.service.CampaignService;</span><br><span class="line"><span class="keyword">import</span> com.hypers.util.common.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.hypers.util.hfa.ZipUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 活动定时上传s3，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CampaignTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  AwsS3Upload upload;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  S3Config s3Config;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> CampaignService campaignService;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="string">"FREQUENCY"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB_JSON = <span class="string">".json"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB_ZIP = <span class="string">".zip"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMP = <span class="string">"/temp/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 每天凌晨执行，统计已过去一天需计算的内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"10 0 0 * * ? "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计上传所需计算的当天截止时间的所有活动（出现过的活动,无视停启用状态）</span></span><br><span class="line"><span class="comment">     * TA 筛选的问题需要加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Calendar calendar = Calendar.getInstance(); <span class="comment">// calendar.set(2019, 11, 26);</span></span><br><span class="line">      Date date = calendar.getTime();<span class="comment">//DateUtils.addDays(, );//DateUtils.addMonths( -1);</span></span><br><span class="line"></span><br><span class="line">      uploadFrequencyFile(date, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 频次计算清单文件上传</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">uploadFrequencyFile</span><span class="params">(Date date, List&lt;Long&gt; accountIds, List&lt;Long&gt; orderIds)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String localPath = s3Config.getTempPath() + TEMP;</span><br><span class="line">    List&lt;Campaign&gt; campaignByDate = campaignService</span><br><span class="line">        .calCampaign(campaignService.getCampaignByDate(date, accountIds, orderIds));</span><br><span class="line">    String content = JSON.toJSONString(campaignByDate);</span><br><span class="line"></span><br><span class="line">    FileUtil.writeFile(localPath, name + SUB_JSON, content);</span><br><span class="line">    File file = <span class="keyword">new</span> File(localPath + name + SUB_JSON);</span><br><span class="line">    ZipUtils.zipFile(file, <span class="string">""</span>);</span><br><span class="line">    file = <span class="keyword">new</span> File(localPath + name + SUB_ZIP);</span><br><span class="line"><span class="comment">//    upload.uploadFile(s3Config.getBucket(), s3Config.getFrequencyPath(), file);</span></span><br><span class="line">    upload.uploadFileWithPublicReadAccess(s3Config.getBucket(), s3Config.getFrequencyPath(),</span><br><span class="line">        file.getName(), <span class="keyword">new</span> FileInputStream(file), <span class="number">0</span>);</span><br><span class="line">    FileUtil.delete(localPath, name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 人工操作：指定日期范围</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ManualMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message.getType()) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"operate"</span>: <span class="comment">// 运营报告</span></span><br><span class="line">        <span class="comment">//计算运营计算清单，发送计算端，目前不支持</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"frequency"</span>: <span class="comment">// 频次报告重算（测试操作）</span></span><br><span class="line">        <span class="comment">//计算重算清单，发送计算端</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.仅指定天重算对应天数据，范围型不支持 (不支持)</span></span><br><span class="line"><span class="comment">         * 2.指定活动，重算该活动及其下所有订单 （没有时间范围默认全范围，可指定范围）</span></span><br><span class="line"><span class="comment">         * 3.指定订单，只算对应活动的指定订单（没有时间范围默认全范围，可指定范围）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Long&gt; accountIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Long&gt; lineOrderIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Account&gt; account = message.getAccount();</span><br><span class="line">        account.forEach(a -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (a.getLineOrders() != <span class="keyword">null</span> &amp;&amp; a.getLineOrders().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            lineOrderIds.addAll(a.getLineOrders());</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            accountIds.add(a.getId());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Calendar calendar = Calendar.getInstance(); <span class="comment">// calendar.set(2019, 11, 26);</span></span><br><span class="line">        Date date = calendar.getTime();<span class="comment">//DateUtils.addDays(, -1);//DateUtils.addMonths( -1);</span></span><br><span class="line">        uploadFrequencyFile(date, accountIds, lineOrderIds);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 发送报警邮件</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>随便说说设计原则</title>
    <link href="https://vinophantom.github.io/2019/03/14/%E9%9A%8F%E4%BE%BF%E8%AF%B4%E8%AF%B4%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://vinophantom.github.io/2019/03/14/%E9%9A%8F%E4%BE%BF%E8%AF%B4%E8%AF%B4%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2019-03-14T08:38:20.000Z</published>
    <updated>2020-04-23T09:22:29.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="SRP-单一职责原则"><a href="#SRP-单一职责原则" class="headerlink" title="SRP - 单一职责原则"></a>SRP - 单一职责原则</h2><p>一个类，最好只负责一件事，只有一个引起它变化的原因。</p><blockquote><p>接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</p></blockquote><h2 id="ISP-接口隔离原则"><a href="#ISP-接口隔离原则" class="headerlink" title="ISP - 接口隔离原则"></a>ISP - 接口隔离原则</h2><ul><li>客户端不应该依赖它不需要的接口。</li><li>类间的依赖关系应该建立在最小的接口上。</li></ul><a id="more"></a><blockquote><ul><li>Clients should not be forced to depend upon interfaces that they don’t use.</li><li>The dependency of one class to another one should depend on the smallest possible interface.</li></ul></blockquote><h2 id="DIP-依赖倒置原则"><a href="#DIP-依赖倒置原则" class="headerlink" title="DIP - 依赖倒置原则"></a>DIP - 依赖倒置原则</h2><ul><li><p><strong>高层模块</strong>不应该依赖<strong>低层模块</strong>，二者都应该依赖其<strong>抽象</strong></p></li><li><p>抽象不应该依赖细节，细节应该<strong>依赖抽象</strong></p></li><li><p>依赖倒置的中心思想是面向接口编程</p></li><li><p>相对于细节的多变性，抽象的东西要稳定得多。</p></li></ul><h2 id="LSP-里氏替换原则"><a href="#LSP-里氏替换原则" class="headerlink" title="LSP - 里氏替换原则"></a>LSP - 里氏替换原则</h2><blockquote><p>If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</p></blockquote><p>所有引用基类的地方必须能透明地使用其子类对象。（尽量不要重写基类的方法）</p><h2 id="Law-of-Demete-迪米特法则"><a href="#Law-of-Demete-迪米特法则" class="headerlink" title="Law of Demete - 迪米特法则"></a>Law of Demete - 迪米特法则</h2><blockquote><p>Only talk to your immediate friends</p></blockquote><h2 id="OCP-开闭原则"><a href="#OCP-开闭原则" class="headerlink" title="OCP - 开闭原则"></a>OCP - 开闭原则</h2><p>以上所有原则的最终目标，是遵守开闭原则</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h1&gt;&lt;h2 id=&quot;SRP-单一职责原则&quot;&gt;&lt;a href=&quot;#SRP-单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;SRP - 单一职责原则&quot;&gt;&lt;/a&gt;SRP - 单一职责原则&lt;/h2&gt;&lt;p&gt;一个类，最好只负责一件事，只有一个引起它变化的原因。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ISP-接口隔离原则&quot;&gt;&lt;a href=&quot;#ISP-接口隔离原则&quot; class=&quot;headerlink&quot; title=&quot;ISP - 接口隔离原则&quot;&gt;&lt;/a&gt;ISP - 接口隔离原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;客户端不应该依赖它不需要的接口。&lt;/li&gt;
&lt;li&gt;类间的依赖关系应该建立在最小的接口上。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="DesignPrinciples" scheme="https://vinophantom.github.io/tags/DesignPrinciples/"/>
    
  </entry>
  
</feed>
